// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Trilhas.Data;

namespace Trilhas.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20190610193552_ListaDeInscricao_Inscricao")]
    partial class ListaDeInscricao_Inscricao
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.8-servicing-32085")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Trilhas.Data.Model.Cadastro.DadosBancarios", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Agencia");

                    b.Property<string>("Banco");

                    b.Property<string>("ContaCorrente");

                    b.Property<long?>("DocenteId");

                    b.HasKey("Id");

                    b.HasIndex("DocenteId");

                    b.ToTable("DadosBancarios");
                });

            modelBuilder.Entity("Trilhas.Data.Model.Cadastro.Deficiencia", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Nome");

                    b.HasKey("Id");

                    b.ToTable("Deficiencia");

                    b.HasData(
                        new { Id = 1L, Nome = "Física" },
                        new { Id = 2L, Nome = "Auditiva" },
                        new { Id = 3L, Nome = "Visual" },
                        new { Id = 4L, Nome = "Mental" }
                    );
                });

            modelBuilder.Entity("Trilhas.Data.Model.Cadastro.Docente", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<string>("CreatorUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("DeletionUserId");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<string>("LastModifierUserId");

                    b.Property<string>("Observacoes");

                    b.Property<long?>("PessoaId");

                    b.HasKey("Id");

                    b.HasIndex("PessoaId");

                    b.ToTable("Docente");
                });

            modelBuilder.Entity("Trilhas.Data.Model.Cadastro.Entidade", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<string>("CreatorUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("DeletionUserId");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<string>("LastModifierUserId");

                    b.Property<long?>("MunicipioId");

                    b.Property<string>("Nome");

                    b.Property<string>("Sigla");

                    b.Property<long>("TipoId");

                    b.HasKey("Id");

                    b.HasIndex("MunicipioId");

                    b.HasIndex("TipoId");

                    b.ToTable("Entidades");
                });

            modelBuilder.Entity("Trilhas.Data.Model.Cadastro.Escolaridade", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Nome");

                    b.HasKey("Id");

                    b.ToTable("Escolaridade");

                    b.HasData(
                        new { Id = 1L, Nome = "1º Grau Incompleto" },
                        new { Id = 2L, Nome = "1º Grau Completo" },
                        new { Id = 3L, Nome = "Ensino Superior Incompleto" },
                        new { Id = 4L, Nome = "Ensino Superior Completo" }
                    );
                });

            modelBuilder.Entity("Trilhas.Data.Model.Cadastro.Formacao", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CargaHoraria");

                    b.Property<string>("Curso");

                    b.Property<DateTime>("DataFim");

                    b.Property<DateTime>("DataInicio");

                    b.Property<long?>("DocenteId");

                    b.Property<string>("Instituicao");

                    b.Property<string>("Titulacao");

                    b.HasKey("Id");

                    b.HasIndex("DocenteId");

                    b.ToTable("Formacao");
                });

            modelBuilder.Entity("Trilhas.Data.Model.Cadastro.Gestor", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("EntidadeId");

                    b.Property<long?>("PessoaId");

                    b.HasKey("Id");

                    b.HasIndex("EntidadeId");

                    b.HasIndex("PessoaId");

                    b.ToTable("Gestor");
                });

            modelBuilder.Entity("Trilhas.Data.Model.Cadastro.Habilitacao", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("CursoId");

                    b.Property<long?>("DocenteId");

                    b.HasKey("Id");

                    b.HasIndex("CursoId");

                    b.HasIndex("DocenteId");

                    b.ToTable("Habilitacao");
                });

            modelBuilder.Entity("Trilhas.Data.Model.Cadastro.Local", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Bairro");

                    b.Property<string>("Cep");

                    b.Property<string>("Cidade");

                    b.Property<string>("Complemento");

                    b.Property<DateTime>("CreationTime");

                    b.Property<string>("CreatorUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("DeletionUserId");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<string>("LastModifierUserId");

                    b.Property<string>("Logradouro");

                    b.Property<string>("Nome");

                    b.Property<string>("Numero");

                    b.Property<string>("Observacoes");

                    b.Property<string>("Uf");

                    b.HasKey("Id");

                    b.ToTable("Local");
                });

            modelBuilder.Entity("Trilhas.Data.Model.Cadastro.LocalContato", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<string>("CreatorUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("DeletionUserId");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<string>("LastModifierUserId");

                    b.Property<long?>("LocalId");

                    b.Property<string>("NumeroTelefone");

                    b.Property<long>("TipoContatoId");

                    b.HasKey("Id");

                    b.HasIndex("LocalId");

                    b.HasIndex("TipoContatoId");

                    b.ToTable("LocalContatos");
                });

            modelBuilder.Entity("Trilhas.Data.Model.Cadastro.LocalRecurso", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<string>("CreatorUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("DeletionUserId");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<string>("LastModifierUserId");

                    b.Property<long?>("LocalId");

                    b.Property<int>("Quantidade");

                    b.Property<long>("RecursoId");

                    b.HasKey("Id");

                    b.HasIndex("LocalId");

                    b.HasIndex("RecursoId");

                    b.ToTable("LocalRecursos");
                });

            modelBuilder.Entity("Trilhas.Data.Model.Cadastro.LocalSala", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Capacidade");

                    b.Property<DateTime>("CreationTime");

                    b.Property<string>("CreatorUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("DeletionUserId");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<string>("LastModifierUserId");

                    b.Property<long?>("LocalId");

                    b.Property<string>("Numero");

                    b.Property<string>("Sigla");

                    b.HasKey("Id");

                    b.HasIndex("LocalId");

                    b.ToTable("LocalSalas");
                });

            modelBuilder.Entity("Trilhas.Data.Model.Cadastro.Municipio", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("NomeMunicipio");

                    b.Property<string>("Uf");

                    b.Property<long>("codigoMunicipio");

                    b.Property<int>("codigoUf");

                    b.HasKey("Id");

                    b.ToTable("Municipios");

                    b.HasData(
                        new { Id = 1L, NomeMunicipio = "Vitória", Uf = "ES", codigoMunicipio = 3205309L, codigoUf = 32 },
                        new { Id = 2L, NomeMunicipio = "Vila Velha", Uf = "ES", codigoMunicipio = 3205200L, codigoUf = 32 },
                        new { Id = 3L, NomeMunicipio = "Serra", Uf = "ES", codigoMunicipio = 3205002L, codigoUf = 32 },
                        new { Id = 4L, NomeMunicipio = "Cariacica", Uf = "ES", codigoMunicipio = 3201308L, codigoUf = 32 }
                    );
                });

            modelBuilder.Entity("Trilhas.Data.Model.Cadastro.OrgaoExpedidor", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Nome");

                    b.Property<string>("Sigla");

                    b.HasKey("Id");

                    b.ToTable("OrgaoExpedidor");

                    b.HasData(
                        new { Id = 1L, Nome = "Secretaria de Segurança Pública", Sigla = "SSP" }
                    );
                });

            modelBuilder.Entity("Trilhas.Data.Model.Cadastro.Pessoa", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Bairro");

                    b.Property<string>("Cep");

                    b.Property<string>("Cidade");

                    b.Property<string>("Complemento");

                    b.Property<string>("Cpf");

                    b.Property<DateTime>("CreationTime");

                    b.Property<string>("CreatorUserId");

                    b.Property<DateTime>("DataNascimento");

                    b.Property<long?>("DeficienciaId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("DeletionUserId");

                    b.Property<string>("Email");

                    b.Property<long?>("EntidadeId");

                    b.Property<long?>("EscolaridadeId");

                    b.Property<bool>("FlagDeficiente");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<string>("LastModifierUserId");

                    b.Property<string>("Logradouro");

                    b.Property<string>("Nome");

                    b.Property<string>("NomeSocial");

                    b.Property<string>("Numero");

                    b.Property<string>("NumeroFuncional");

                    b.Property<string>("NumeroIdentidade");

                    b.Property<string>("NumeroTitulo");

                    b.Property<long?>("OrgaoExpedidorId");

                    b.Property<string>("Pis");

                    b.Property<string>("SecaoTitulo");

                    b.Property<long?>("SexoId");

                    b.Property<string>("Uf");

                    b.Property<string>("UfIdentidade");

                    b.Property<string>("ZonaTitulo");

                    b.HasKey("Id");

                    b.HasIndex("DeficienciaId");

                    b.HasIndex("EntidadeId");

                    b.HasIndex("EscolaridadeId");

                    b.HasIndex("OrgaoExpedidorId");

                    b.HasIndex("SexoId");

                    b.ToTable("Pessoa");
                });

            modelBuilder.Entity("Trilhas.Data.Model.Cadastro.PessoaContato", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<string>("CreatorUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("DeletionUserId");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<string>("LastModifierUserId");

                    b.Property<string>("Numero");

                    b.Property<long?>("PessoaId");

                    b.Property<long>("TipoPessoaContatoId");

                    b.HasKey("Id");

                    b.HasIndex("PessoaId");

                    b.HasIndex("TipoPessoaContatoId");

                    b.ToTable("PessoaContato");
                });

            modelBuilder.Entity("Trilhas.Data.Model.Cadastro.Recurso", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<string>("CreatorUserId");

                    b.Property<decimal>("Custo")
                        .HasColumnType("decimal(7, 2)");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("DeletionUserId");

                    b.Property<string>("Descricao");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<string>("LastModifierUserId");

                    b.Property<string>("Nome");

                    b.HasKey("Id");

                    b.ToTable("Recursos");
                });

            modelBuilder.Entity("Trilhas.Data.Model.Cadastro.Sexo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Nome");

                    b.HasKey("Id");

                    b.ToTable("Sexo");

                    b.HasData(
                        new { Id = 1L, Nome = "Masculino" },
                        new { Id = 2L, Nome = "Feminino" },
                        new { Id = 3L, Nome = "Outro" }
                    );
                });

            modelBuilder.Entity("Trilhas.Data.Model.Cadastro.TipoDeEntidade", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Descricao");

                    b.HasKey("Id");

                    b.ToTable("TiposDeEntidade");

                    b.HasData(
                        new { Id = 1L, Descricao = "Municipal" },
                        new { Id = 2L, Descricao = "Estadual" },
                        new { Id = 3L, Descricao = "Federal" },
                        new { Id = 4L, Descricao = "Organização Não Governamental" }
                    );
                });

            modelBuilder.Entity("Trilhas.Data.Model.Cadastro.TipoLocalContato", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Nome");

                    b.HasKey("Id");

                    b.ToTable("TipoLocalContato");

                    b.HasData(
                        new { Id = 1L, Nome = "Fixo" },
                        new { Id = 2L, Nome = "Celular" },
                        new { Id = 3L, Nome = "Fax" }
                    );
                });

            modelBuilder.Entity("Trilhas.Data.Model.Cadastro.TipoPessoaContato", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Nome");

                    b.HasKey("Id");

                    b.ToTable("TipoPessoaContato");

                    b.HasData(
                        new { Id = 1L, Nome = "Fixo" },
                        new { Id = 2L, Nome = "Celular" },
                        new { Id = 3L, Nome = "Fax" }
                    );
                });

            modelBuilder.Entity("Trilhas.Data.Model.Eventos.Evento", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("CoordenadorPessoaId");

                    b.Property<DateTime>("CreationTime");

                    b.Property<string>("CreatorUserId");

                    b.Property<long?>("CursoId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("DeletionUserId");

                    b.Property<long?>("EntidadeDemandanteId");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<string>("LastModifierUserId");

                    b.Property<long?>("LocalId");

                    b.Property<string>("Observacoes");

                    b.Property<int>("Situacao");

                    b.Property<string>("UrlEad");

                    b.HasKey("Id");

                    b.HasIndex("CoordenadorPessoaId");

                    b.HasIndex("CursoId");

                    b.HasIndex("EntidadeDemandanteId");

                    b.HasIndex("LocalId");

                    b.ToTable("Evento");
                });

            modelBuilder.Entity("Trilhas.Data.Model.Eventos.EventoAgenda", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<string>("CreatorUserId");

                    b.Property<DateTime>("DataHoraFim");

                    b.Property<DateTime>("DataHoraInicio");

                    b.Property<DateTime>("DataHoraInscricaoFim");

                    b.Property<DateTime>("DataHoraInscricaoInicio");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("DeletionUserId");

                    b.Property<long?>("EventoId");

                    b.Property<string>("Justificativa");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<string>("LastModifierUserId");

                    b.Property<int>("NumeroVagas");

                    b.HasKey("Id");

                    b.HasIndex("EventoId");

                    b.ToTable("EventoAgenda");
                });

            modelBuilder.Entity("Trilhas.Data.Model.Eventos.EventoCota", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("EntidadeId");

                    b.Property<long?>("EventoId");

                    b.Property<int>("Quantidade");

                    b.HasKey("Id");

                    b.HasIndex("EntidadeId");

                    b.HasIndex("EventoId");

                    b.ToTable("EventoCota");
                });

            modelBuilder.Entity("Trilhas.Data.Model.Eventos.EventoHorario", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DataHoraFim");

                    b.Property<DateTime>("DataHoraInicio");

                    b.Property<long?>("DocenteId");

                    b.Property<long?>("EventoId");

                    b.Property<string>("Funcao");

                    b.Property<long?>("LocalId");

                    b.Property<long?>("LocalSalaId");

                    b.Property<long?>("ModuloId");

                    b.HasKey("Id");

                    b.HasIndex("DocenteId");

                    b.HasIndex("EventoId");

                    b.HasIndex("LocalId");

                    b.HasIndex("LocalSalaId");

                    b.HasIndex("ModuloId");

                    b.ToTable("EventoHorario");
                });

            modelBuilder.Entity("Trilhas.Data.Model.Eventos.EventoRecurso", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("EventoId");

                    b.Property<int>("Quantidade");

                    b.Property<long?>("RecursoId");

                    b.HasKey("Id");

                    b.HasIndex("EventoId");

                    b.HasIndex("RecursoId");

                    b.ToTable("EventoRecurso");
                });

            modelBuilder.Entity("Trilhas.Data.Model.Eventos.Inscricao", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<string>("CreatorUserId");

                    b.Property<DateTime>("DataDeInscricao");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("DeletionUserId");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<string>("LastModifierUserId");

                    b.Property<long?>("ListaDeInscricaoId");

                    b.Property<long?>("PessoaId");

                    b.HasKey("Id");

                    b.HasIndex("ListaDeInscricaoId");

                    b.HasIndex("PessoaId");

                    b.ToTable("Inscricao");
                });

            modelBuilder.Entity("Trilhas.Data.Model.Eventos.ListaDeInscricao", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("EventoId");

                    b.HasKey("Id");

                    b.HasIndex("EventoId")
                        .IsUnique()
                        .HasFilter("[EventoId] IS NOT NULL");

                    b.ToTable("ListaDeInscricao");
                });

            modelBuilder.Entity("Trilhas.Data.Model.Trilhas.Eixo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<string>("CreatorUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("DeletionUserId");

                    b.Property<string>("Descricao");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<string>("LastModifierUserId");

                    b.Property<string>("Nome");

                    b.HasKey("Id");

                    b.ToTable("Eixos");
                });

            modelBuilder.Entity("Trilhas.Data.Model.Trilhas.Estacao", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<string>("CreatorUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("DeletionUserId");

                    b.Property<string>("Descricao");

                    b.Property<long?>("EixoId");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<string>("LastModifierUserId");

                    b.Property<string>("Nome");

                    b.HasKey("Id");

                    b.HasIndex("EixoId");

                    b.ToTable("Estacoes");
                });

            modelBuilder.Entity("Trilhas.Data.Model.Trilhas.Habilidade", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("CursoId");

                    b.Property<string>("Descricao");

                    b.Property<long?>("SolucaoEducacionalId");

                    b.HasKey("Id");

                    b.HasIndex("CursoId");

                    b.HasIndex("SolucaoEducacionalId");

                    b.ToTable("Habilidades");
                });

            modelBuilder.Entity("Trilhas.Data.Model.Trilhas.ItemDaTrilha", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<string>("CreatorUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("DeletionUserId");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<string>("LastModifierUserId");

                    b.Property<long?>("SolucaoId");

                    b.Property<long?>("TrilhaId");

                    b.HasKey("Id");

                    b.HasIndex("SolucaoId");

                    b.HasIndex("TrilhaId");

                    b.ToTable("ItensDaTrilha");
                });

            modelBuilder.Entity("Trilhas.Data.Model.Trilhas.Modulo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CargaHoraria");

                    b.Property<long?>("CursoId");

                    b.Property<string>("Descricao");

                    b.Property<string>("Nome");

                    b.Property<long?>("SolucaoEducacionalId");

                    b.HasKey("Id");

                    b.HasIndex("CursoId");

                    b.HasIndex("SolucaoEducacionalId");

                    b.ToTable("Modulos");
                });

            modelBuilder.Entity("Trilhas.Data.Model.Trilhas.NivelDeCurso", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Descricao");

                    b.HasKey("Id");

                    b.ToTable("NiveisDeCurso");

                    b.HasData(
                        new { Id = 1L, Descricao = "Capacitação" },
                        new { Id = 2L, Descricao = "Formação" }
                    );
                });

            modelBuilder.Entity("Trilhas.Data.Model.Trilhas.SolucaoEducacional", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<string>("CreatorUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("DeletionUserId");

                    b.Property<long?>("EstacaoId");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<string>("LastModifierUserId");

                    b.Property<string>("TipoDeSolucao")
                        .IsRequired();

                    b.Property<string>("Titulo");

                    b.HasKey("Id");

                    b.HasIndex("EstacaoId");

                    b.ToTable("SolucoesEducacionais");

                    b.HasDiscriminator<string>("TipoDeSolucao").HasValue("SolucaoEducacional");
                });

            modelBuilder.Entity("Trilhas.Data.Model.Trilhas.TipoDeCurso", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Descricao");

                    b.HasKey("Id");

                    b.ToTable("TiposDeCurso");

                    b.HasData(
                        new { Id = 1L, Descricao = "Presencial" },
                        new { Id = 3L, Descricao = "EaD" },
                        new { Id = 5L, Descricao = "Fórum" },
                        new { Id = 7L, Descricao = "Mesa Redonda" },
                        new { Id = 9L, Descricao = "Palestra" },
                        new { Id = 11L, Descricao = "Seminário" },
                        new { Id = 13L, Descricao = "WorkShop" }
                    );
                });

            modelBuilder.Entity("Trilhas.Data.Model.Trilhas.TrilhaDoUsuario", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<string>("CreatorUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("DeletionUserId");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<string>("LastModifierUserId");

                    b.Property<string>("UsuarioId");

                    b.HasKey("Id");

                    b.ToTable("Trilhas");
                });

            modelBuilder.Entity("Trilhas.Data.Model.Trilhas.Curso", b =>
                {
                    b.HasBaseType("Trilhas.Data.Model.Trilhas.SolucaoEducacional");

                    b.Property<string>("ConteudoProgramatico");

                    b.Property<string>("Descricao");

                    b.Property<int>("FrequenciaMinimaCertificado");

                    b.Property<int>("FrequenciaMinimaDeclaracao");

                    b.Property<long?>("NivelDoCursoId");

                    b.Property<bool>("PermiteCertificado");

                    b.Property<string>("PreRequisitos");

                    b.Property<string>("PublicoAlvo");

                    b.Property<string>("Sigla");

                    b.Property<long?>("TipoDoCursoId");

                    b.HasIndex("NivelDoCursoId");

                    b.HasIndex("TipoDoCursoId");

                    b.ToTable("Curso");

                    b.HasDiscriminator().HasValue("curso");
                });

            modelBuilder.Entity("Trilhas.Data.Model.Trilhas.Livro", b =>
                {
                    b.HasBaseType("Trilhas.Data.Model.Trilhas.SolucaoEducacional");

                    b.Property<string>("Autor");

                    b.Property<DateTime?>("DataPublicacao");

                    b.Property<string>("Edicao");

                    b.Property<string>("Editora");

                    b.Property<string>("OutrasInformacoes");

                    b.Property<string>("Url");

                    b.ToTable("Livro");

                    b.HasDiscriminator().HasValue("livro");
                });

            modelBuilder.Entity("Trilhas.Data.Model.Trilhas.Video", b =>
                {
                    b.HasBaseType("Trilhas.Data.Model.Trilhas.SolucaoEducacional");

                    b.Property<DateTime?>("DataProducao");

                    b.Property<string>("Duracao");

                    b.Property<string>("OutrasInformacoes")
                        .HasColumnName("Video_OutrasInformacoes");

                    b.Property<string>("Responsavel");

                    b.Property<string>("Url")
                        .HasColumnName("Video_Url");

                    b.ToTable("Video");

                    b.HasDiscriminator().HasValue("video");
                });

            modelBuilder.Entity("Trilhas.Data.Model.Cadastro.DadosBancarios", b =>
                {
                    b.HasOne("Trilhas.Data.Model.Cadastro.Docente", "Docente")
                        .WithMany("DadosBancarios")
                        .HasForeignKey("DocenteId");
                });

            modelBuilder.Entity("Trilhas.Data.Model.Cadastro.Docente", b =>
                {
                    b.HasOne("Trilhas.Data.Model.Cadastro.Pessoa", "Pessoa")
                        .WithMany()
                        .HasForeignKey("PessoaId");
                });

            modelBuilder.Entity("Trilhas.Data.Model.Cadastro.Entidade", b =>
                {
                    b.HasOne("Trilhas.Data.Model.Cadastro.Municipio", "Municipio")
                        .WithMany()
                        .HasForeignKey("MunicipioId");

                    b.HasOne("Trilhas.Data.Model.Cadastro.TipoDeEntidade", "Tipo")
                        .WithMany()
                        .HasForeignKey("TipoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Trilhas.Data.Model.Cadastro.Formacao", b =>
                {
                    b.HasOne("Trilhas.Data.Model.Cadastro.Docente", "Docente")
                        .WithMany("Formacao")
                        .HasForeignKey("DocenteId");
                });

            modelBuilder.Entity("Trilhas.Data.Model.Cadastro.Gestor", b =>
                {
                    b.HasOne("Trilhas.Data.Model.Cadastro.Entidade", "Entidade")
                        .WithMany("Gestores")
                        .HasForeignKey("EntidadeId");

                    b.HasOne("Trilhas.Data.Model.Cadastro.Pessoa", "Pessoa")
                        .WithMany()
                        .HasForeignKey("PessoaId");
                });

            modelBuilder.Entity("Trilhas.Data.Model.Cadastro.Habilitacao", b =>
                {
                    b.HasOne("Trilhas.Data.Model.Trilhas.Curso", "Curso")
                        .WithMany()
                        .HasForeignKey("CursoId");

                    b.HasOne("Trilhas.Data.Model.Cadastro.Docente", "Docente")
                        .WithMany("Habilitacao")
                        .HasForeignKey("DocenteId");
                });

            modelBuilder.Entity("Trilhas.Data.Model.Cadastro.LocalContato", b =>
                {
                    b.HasOne("Trilhas.Data.Model.Cadastro.Local", "Local")
                        .WithMany("Contatos")
                        .HasForeignKey("LocalId");

                    b.HasOne("Trilhas.Data.Model.Cadastro.TipoLocalContato", "TipoContato")
                        .WithMany()
                        .HasForeignKey("TipoContatoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Trilhas.Data.Model.Cadastro.LocalRecurso", b =>
                {
                    b.HasOne("Trilhas.Data.Model.Cadastro.Local", "Local")
                        .WithMany("Recursos")
                        .HasForeignKey("LocalId");

                    b.HasOne("Trilhas.Data.Model.Cadastro.Recurso", "Recurso")
                        .WithMany()
                        .HasForeignKey("RecursoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Trilhas.Data.Model.Cadastro.LocalSala", b =>
                {
                    b.HasOne("Trilhas.Data.Model.Cadastro.Local", "Local")
                        .WithMany("Salas")
                        .HasForeignKey("LocalId");
                });

            modelBuilder.Entity("Trilhas.Data.Model.Cadastro.Pessoa", b =>
                {
                    b.HasOne("Trilhas.Data.Model.Cadastro.Deficiencia", "Deficiencia")
                        .WithMany()
                        .HasForeignKey("DeficienciaId");

                    b.HasOne("Trilhas.Data.Model.Cadastro.Entidade", "Entidade")
                        .WithMany()
                        .HasForeignKey("EntidadeId");

                    b.HasOne("Trilhas.Data.Model.Cadastro.Escolaridade", "Escolaridade")
                        .WithMany()
                        .HasForeignKey("EscolaridadeId");

                    b.HasOne("Trilhas.Data.Model.Cadastro.OrgaoExpedidor", "OrgaoExpedidorIdentidade")
                        .WithMany()
                        .HasForeignKey("OrgaoExpedidorId");

                    b.HasOne("Trilhas.Data.Model.Cadastro.Sexo", "Sexo")
                        .WithMany()
                        .HasForeignKey("SexoId");
                });

            modelBuilder.Entity("Trilhas.Data.Model.Cadastro.PessoaContato", b =>
                {
                    b.HasOne("Trilhas.Data.Model.Cadastro.Pessoa", "Pessoa")
                        .WithMany("Contatos")
                        .HasForeignKey("PessoaId");

                    b.HasOne("Trilhas.Data.Model.Cadastro.TipoPessoaContato", "TipoContato")
                        .WithMany()
                        .HasForeignKey("TipoPessoaContatoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Trilhas.Data.Model.Eventos.Evento", b =>
                {
                    b.HasOne("Trilhas.Data.Model.Cadastro.Pessoa", "Coordenador")
                        .WithMany()
                        .HasForeignKey("CoordenadorPessoaId");

                    b.HasOne("Trilhas.Data.Model.Trilhas.Curso", "Curso")
                        .WithMany()
                        .HasForeignKey("CursoId");

                    b.HasOne("Trilhas.Data.Model.Cadastro.Entidade", "EntidadeDemandante")
                        .WithMany()
                        .HasForeignKey("EntidadeDemandanteId");

                    b.HasOne("Trilhas.Data.Model.Cadastro.Local", "Local")
                        .WithMany()
                        .HasForeignKey("LocalId");
                });

            modelBuilder.Entity("Trilhas.Data.Model.Eventos.EventoAgenda", b =>
                {
                    b.HasOne("Trilhas.Data.Model.Eventos.Evento", "Evento")
                        .WithMany("Agendas")
                        .HasForeignKey("EventoId");
                });

            modelBuilder.Entity("Trilhas.Data.Model.Eventos.EventoCota", b =>
                {
                    b.HasOne("Trilhas.Data.Model.Cadastro.Entidade", "Entidade")
                        .WithMany()
                        .HasForeignKey("EntidadeId");

                    b.HasOne("Trilhas.Data.Model.Eventos.Evento", "Evento")
                        .WithMany("Cotas")
                        .HasForeignKey("EventoId");
                });

            modelBuilder.Entity("Trilhas.Data.Model.Eventos.EventoHorario", b =>
                {
                    b.HasOne("Trilhas.Data.Model.Cadastro.Docente", "Docente")
                        .WithMany()
                        .HasForeignKey("DocenteId");

                    b.HasOne("Trilhas.Data.Model.Eventos.Evento", "Evento")
                        .WithMany("Horarios")
                        .HasForeignKey("EventoId");

                    b.HasOne("Trilhas.Data.Model.Cadastro.Local", "Local")
                        .WithMany()
                        .HasForeignKey("LocalId");

                    b.HasOne("Trilhas.Data.Model.Cadastro.LocalSala", "Sala")
                        .WithMany()
                        .HasForeignKey("LocalSalaId");

                    b.HasOne("Trilhas.Data.Model.Trilhas.Modulo", "Modulo")
                        .WithMany()
                        .HasForeignKey("ModuloId");
                });

            modelBuilder.Entity("Trilhas.Data.Model.Eventos.EventoRecurso", b =>
                {
                    b.HasOne("Trilhas.Data.Model.Eventos.Evento", "Evento")
                        .WithMany("Recursos")
                        .HasForeignKey("EventoId");

                    b.HasOne("Trilhas.Data.Model.Cadastro.Recurso", "Recurso")
                        .WithMany()
                        .HasForeignKey("RecursoId");
                });

            modelBuilder.Entity("Trilhas.Data.Model.Eventos.Inscricao", b =>
                {
                    b.HasOne("Trilhas.Data.Model.Eventos.ListaDeInscricao")
                        .WithMany("Inscritos")
                        .HasForeignKey("ListaDeInscricaoId");

                    b.HasOne("Trilhas.Data.Model.Cadastro.Pessoa", "Pessoa")
                        .WithMany()
                        .HasForeignKey("PessoaId");
                });

            modelBuilder.Entity("Trilhas.Data.Model.Eventos.ListaDeInscricao", b =>
                {
                    b.HasOne("Trilhas.Data.Model.Eventos.Evento", "Evento")
                        .WithOne("ListaDeInscricao")
                        .HasForeignKey("Trilhas.Data.Model.Eventos.ListaDeInscricao", "EventoId");
                });

            modelBuilder.Entity("Trilhas.Data.Model.Trilhas.Estacao", b =>
                {
                    b.HasOne("Trilhas.Data.Model.Trilhas.Eixo", "Eixo")
                        .WithMany()
                        .HasForeignKey("EixoId");
                });

            modelBuilder.Entity("Trilhas.Data.Model.Trilhas.Habilidade", b =>
                {
                    b.HasOne("Trilhas.Data.Model.Trilhas.Curso")
                        .WithMany("Habilidades")
                        .HasForeignKey("CursoId");

                    b.HasOne("Trilhas.Data.Model.Trilhas.SolucaoEducacional", "SolucaoEducacional")
                        .WithMany()
                        .HasForeignKey("SolucaoEducacionalId");
                });

            modelBuilder.Entity("Trilhas.Data.Model.Trilhas.ItemDaTrilha", b =>
                {
                    b.HasOne("Trilhas.Data.Model.Trilhas.SolucaoEducacional", "SolucaoEducacional")
                        .WithMany()
                        .HasForeignKey("SolucaoId");

                    b.HasOne("Trilhas.Data.Model.Trilhas.TrilhaDoUsuario", "Trilha")
                        .WithMany("Itens")
                        .HasForeignKey("TrilhaId");
                });

            modelBuilder.Entity("Trilhas.Data.Model.Trilhas.Modulo", b =>
                {
                    b.HasOne("Trilhas.Data.Model.Trilhas.Curso")
                        .WithMany("Modulos")
                        .HasForeignKey("CursoId");

                    b.HasOne("Trilhas.Data.Model.Trilhas.SolucaoEducacional", "SolucaoEducacional")
                        .WithMany()
                        .HasForeignKey("SolucaoEducacionalId");
                });

            modelBuilder.Entity("Trilhas.Data.Model.Trilhas.SolucaoEducacional", b =>
                {
                    b.HasOne("Trilhas.Data.Model.Trilhas.Estacao", "Estacao")
                        .WithMany()
                        .HasForeignKey("EstacaoId");
                });

            modelBuilder.Entity("Trilhas.Data.Model.Trilhas.Curso", b =>
                {
                    b.HasOne("Trilhas.Data.Model.Trilhas.NivelDeCurso", "NivelDoCurso")
                        .WithMany()
                        .HasForeignKey("NivelDoCursoId");

                    b.HasOne("Trilhas.Data.Model.Trilhas.TipoDeCurso", "TipoDoCurso")
                        .WithMany()
                        .HasForeignKey("TipoDoCursoId");
                });
#pragma warning restore 612, 618
        }
    }
}
