// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Trilhas.Data;

namespace Trilhas.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20190423174417_modulos2")]
    partial class modulos2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.8-servicing-32085")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Trilhas.Data.Model.Trilhas.Entidades.Eixo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<string>("CreatorUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("DeletionUserId");

                    b.Property<string>("Descricao");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<string>("LastModifierUserId");

                    b.Property<string>("Nome");

                    b.HasKey("Id");

                    b.ToTable("Eixos");
                });

            modelBuilder.Entity("Trilhas.Data.Model.Trilhas.Entidades.Estacao", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<string>("CreatorUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("DeletionUserId");

                    b.Property<string>("Descricao");

                    b.Property<long?>("EixoId");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<string>("LastModifierUserId");

                    b.Property<string>("Nome");

                    b.HasKey("Id");

                    b.HasIndex("EixoId");

                    b.ToTable("Estacoes");
                });

            modelBuilder.Entity("Trilhas.Data.Model.Trilhas.Entidades.Habilidade", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("CursoId");

                    b.Property<string>("Descricao");

                    b.Property<long?>("SolucaoEducacionalId");

                    b.HasKey("Id");

                    b.HasIndex("CursoId");

                    b.HasIndex("SolucaoEducacionalId");

                    b.ToTable("Habilidades");
                });

            modelBuilder.Entity("Trilhas.Data.Model.Trilhas.Entidades.Modulo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CargaHoraria");

                    b.Property<long?>("CursoId");

                    b.Property<string>("Descricao");

                    b.Property<string>("Nome");

                    b.Property<long?>("SolucaoEducacionalId");

                    b.HasKey("Id");

                    b.HasIndex("CursoId");

                    b.HasIndex("SolucaoEducacionalId");

                    b.ToTable("Modulos");
                });

            modelBuilder.Entity("Trilhas.Data.Model.Trilhas.Entidades.NivelDeCurso", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Descricao");

                    b.HasKey("Id");

                    b.ToTable("NiveisDeCurso");

                    b.HasData(
                        new { Id = 1L, Descricao = "Capacitação" },
                        new { Id = 2L, Descricao = "Formação" }
                    );
                });

            modelBuilder.Entity("Trilhas.Data.Model.Trilhas.Entidades.SolucaoEducacional", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<string>("CreatorUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("DeletionUserId");

                    b.Property<long?>("EstacaoId");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<string>("LastModifierUserId");

                    b.Property<string>("TipoDeSolucao")
                        .IsRequired();

                    b.Property<string>("Titulo");

                    b.HasKey("Id");

                    b.HasIndex("EstacaoId");

                    b.ToTable("SolucoesEducacionais");

                    b.HasDiscriminator<string>("TipoDeSolucao").HasValue("SolucaoEducacional");
                });

            modelBuilder.Entity("Trilhas.Data.Model.Trilhas.Entidades.TipoDeCurso", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Descricao");

                    b.HasKey("Id");

                    b.ToTable("TiposDeCurso");

                    b.HasData(
                        new { Id = 1L, Descricao = "Presencial" },
                        new { Id = 3L, Descricao = "EaD" },
                        new { Id = 5L, Descricao = "Fórum" },
                        new { Id = 7L, Descricao = "Mesa Redonda" },
                        new { Id = 9L, Descricao = "Palestra" },
                        new { Id = 11L, Descricao = "Seminário" },
                        new { Id = 13L, Descricao = "WorkShop" }
                    );
                });

            modelBuilder.Entity("Trilhas.Data.Model.Trilhas.Entidades.Curso", b =>
                {
                    b.HasBaseType("Trilhas.Data.Model.Trilhas.Entidades.SolucaoEducacional");

                    b.Property<string>("ConteudoProgramatico");

                    b.Property<string>("Descricao");

                    b.Property<int>("FrequenciaMinimaCertificado");

                    b.Property<int>("FrequenciaMinimaDeclaracao");

                    b.Property<long?>("NivelDoCursoId");

                    b.Property<bool>("PermiteCertificado");

                    b.Property<string>("PreRequisitos");

                    b.Property<string>("PublicoAlvo");

                    b.Property<string>("Sigla");

                    b.Property<long?>("TipoDoCursoId");

                    b.HasIndex("NivelDoCursoId");

                    b.HasIndex("TipoDoCursoId");

                    b.ToTable("Curso");

                    b.HasDiscriminator().HasValue("curso");
                });

            modelBuilder.Entity("Trilhas.Data.Model.Trilhas.Entidades.Livro", b =>
                {
                    b.HasBaseType("Trilhas.Data.Model.Trilhas.Entidades.SolucaoEducacional");

                    b.Property<string>("Autor");

                    b.Property<DateTime?>("DataPublicacao");

                    b.Property<string>("Edicao");

                    b.Property<string>("Editora");

                    b.Property<string>("OutrasInformacoes");

                    b.Property<string>("Url");

                    b.ToTable("Livro");

                    b.HasDiscriminator().HasValue("livro");
                });

            modelBuilder.Entity("Trilhas.Data.Model.Trilhas.Entidades.Video", b =>
                {
                    b.HasBaseType("Trilhas.Data.Model.Trilhas.Entidades.SolucaoEducacional");

                    b.Property<DateTime?>("DataProducao");

                    b.Property<string>("Duracao");

                    b.Property<string>("OutrasInformacoes")
                        .HasColumnName("Video_OutrasInformacoes");

                    b.Property<string>("Responsavel");

                    b.Property<string>("Url")
                        .HasColumnName("Video_Url");

                    b.ToTable("Video");

                    b.HasDiscriminator().HasValue("video");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Trilhas.Data.Model.Trilhas.Entidades.Estacao", b =>
                {
                    b.HasOne("Trilhas.Data.Model.Trilhas.Entidades.Eixo", "Eixo")
                        .WithMany()
                        .HasForeignKey("EixoId");
                });

            modelBuilder.Entity("Trilhas.Data.Model.Trilhas.Entidades.Habilidade", b =>
                {
                    b.HasOne("Trilhas.Data.Model.Trilhas.Entidades.Curso")
                        .WithMany("Habilidades")
                        .HasForeignKey("CursoId");

                    b.HasOne("Trilhas.Data.Model.Trilhas.Entidades.SolucaoEducacional", "SolucaoEducacional")
                        .WithMany()
                        .HasForeignKey("SolucaoEducacionalId");
                });

            modelBuilder.Entity("Trilhas.Data.Model.Trilhas.Entidades.Modulo", b =>
                {
                    b.HasOne("Trilhas.Data.Model.Trilhas.Entidades.Curso")
                        .WithMany("Modulos")
                        .HasForeignKey("CursoId");

                    b.HasOne("Trilhas.Data.Model.Trilhas.Entidades.SolucaoEducacional", "SolucaoEducacional")
                        .WithMany()
                        .HasForeignKey("SolucaoEducacionalId");
                });

            modelBuilder.Entity("Trilhas.Data.Model.Trilhas.Entidades.SolucaoEducacional", b =>
                {
                    b.HasOne("Trilhas.Data.Model.Trilhas.Entidades.Estacao", "Estacao")
                        .WithMany()
                        .HasForeignKey("EstacaoId");
                });

            modelBuilder.Entity("Trilhas.Data.Model.Trilhas.Entidades.Curso", b =>
                {
                    b.HasOne("Trilhas.Data.Model.Trilhas.Entidades.NivelDeCurso", "NivelDoCurso")
                        .WithMany()
                        .HasForeignKey("NivelDoCursoId");

                    b.HasOne("Trilhas.Data.Model.Trilhas.Entidades.TipoDeCurso", "TipoDoCurso")
                        .WithMany()
                        .HasForeignKey("TipoDoCursoId");
                });
#pragma warning restore 612, 618
        }
    }
}
