// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Trilhas.Data;

namespace Trilhas.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20190522195917_correcaoNomeColunas2")]
    partial class correcaoNomeColunas2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.11-servicing-32099")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Trilhas.Data.Model.Deficiencia", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Nome");

                    b.HasKey("Id");

                    b.ToTable("Deficiencia");
                });

            modelBuilder.Entity("Trilhas.Data.Model.Eixo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<string>("CreatorUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("DeletionUserId");

                    b.Property<string>("Descricao");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<string>("LastModifierUserId");

                    b.Property<string>("Nome");

                    b.HasKey("Id");

                    b.ToTable("Eixos");
                });

            modelBuilder.Entity("Trilhas.Data.Model.Entidade", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<string>("CreatorUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("DeletionUserId");

                    b.Property<string>("Descricao");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<string>("LastModifierUserId");

                    b.Property<long?>("MunicipioId");

                    b.Property<string>("Nome");

                    b.Property<long?>("TipoId");

                    b.HasKey("Id");

                    b.HasIndex("MunicipioId");

                    b.HasIndex("TipoId");

                    b.ToTable("Entidades");
                });

            modelBuilder.Entity("Trilhas.Data.Model.Escolaridade", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Nome");

                    b.HasKey("Id");

                    b.ToTable("Escolaridade");
                });

            modelBuilder.Entity("Trilhas.Data.Model.Estacao", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<string>("CreatorUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("DeletionUserId");

                    b.Property<string>("Descricao");

                    b.Property<long?>("EixoId");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<string>("LastModifierUserId");

                    b.Property<string>("Nome");

                    b.HasKey("Id");

                    b.HasIndex("EixoId");

                    b.ToTable("Estacoes");
                });

            modelBuilder.Entity("Trilhas.Data.Model.Habilidade", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("CursoId");

                    b.Property<string>("Descricao");

                    b.Property<long?>("SolucaoEducacionalId");

                    b.HasKey("Id");

                    b.HasIndex("CursoId");

                    b.HasIndex("SolucaoEducacionalId");

                    b.ToTable("Habilidades");
                });

            modelBuilder.Entity("Trilhas.Data.Model.ItemDaTrilha", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<string>("CreatorUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("DeletionUserId");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<string>("LastModifierUserId");

                    b.Property<long?>("SolucaoId");

                    b.Property<long?>("TrilhaId");

                    b.HasKey("Id");

                    b.HasIndex("SolucaoId");

                    b.HasIndex("TrilhaId");

                    b.ToTable("ItensDaTrilha");
                });

            modelBuilder.Entity("Trilhas.Data.Model.Local", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Bairro");

                    b.Property<string>("Cep");

                    b.Property<string>("Cidade");

                    b.Property<string>("Complemento");

                    b.Property<DateTime>("CreationTime");

                    b.Property<string>("CreatorUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("DeletionUserId");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<string>("LastModifierUserId");

                    b.Property<string>("Logradouro");

                    b.Property<string>("Nome");

                    b.Property<string>("Numero");

                    b.Property<string>("Observacoes");

                    b.Property<string>("Uf");

                    b.HasKey("Id");

                    b.ToTable("Local");
                });

            modelBuilder.Entity("Trilhas.Data.Model.LocalContato", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<string>("CreatorUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("DeletionUserId");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<string>("LastModifierUserId");

                    b.Property<long?>("LocalId");

                    b.Property<string>("NumeroTelefone");

                    b.Property<long>("TipoContatoId");

                    b.HasKey("Id");

                    b.HasIndex("LocalId");

                    b.HasIndex("TipoContatoId");

                    b.ToTable("LocalContatos");
                });

            modelBuilder.Entity("Trilhas.Data.Model.LocalRecurso", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<string>("CreatorUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("DeletionUserId");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<string>("LastModifierUserId");

                    b.Property<long?>("LocalId");

                    b.Property<int>("Quantidade");

                    b.Property<long>("RecursoId");

                    b.HasKey("Id");

                    b.HasIndex("LocalId");

                    b.HasIndex("RecursoId");

                    b.ToTable("LocalRecursos");
                });

            modelBuilder.Entity("Trilhas.Data.Model.LocalSala", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Capacidade");

                    b.Property<DateTime>("CreationTime");

                    b.Property<string>("CreatorUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("DeletionUserId");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<string>("LastModifierUserId");

                    b.Property<long?>("LocalId");

                    b.Property<string>("Numero");

                    b.Property<string>("Sigla");

                    b.HasKey("Id");

                    b.HasIndex("LocalId");

                    b.ToTable("LocalSalas");
                });

            modelBuilder.Entity("Trilhas.Data.Model.Modulo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CargaHoraria");

                    b.Property<long?>("CursoId");

                    b.Property<string>("Descricao");

                    b.Property<string>("Nome");

                    b.Property<long?>("SolucaoEducacionalId");

                    b.HasKey("Id");

                    b.HasIndex("CursoId");

                    b.HasIndex("SolucaoEducacionalId");

                    b.ToTable("Modulos");
                });

            modelBuilder.Entity("Trilhas.Data.Model.Municipio", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("NomeMunicipio");

                    b.Property<string>("Uf");

                    b.Property<long>("codigoMunicipio");

                    b.Property<int>("codigoUf");

                    b.HasKey("Id");

                    b.ToTable("Municipios");

                    b.HasData(
                        new { Id = 1L, NomeMunicipio = "Vitória", Uf = "ES", codigoMunicipio = 3205309L, codigoUf = 32 },
                        new { Id = 2L, NomeMunicipio = "Vila Velha", Uf = "ES", codigoMunicipio = 3205200L, codigoUf = 32 },
                        new { Id = 3L, NomeMunicipio = "Serra", Uf = "ES", codigoMunicipio = 3205002L, codigoUf = 32 },
                        new { Id = 4L, NomeMunicipio = "Cariacica", Uf = "ES", codigoMunicipio = 3201308L, codigoUf = 32 }
                    );
                });

            modelBuilder.Entity("Trilhas.Data.Model.NivelDeCurso", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Descricao");

                    b.HasKey("Id");

                    b.ToTable("NiveisDeCurso");

                    b.HasData(
                        new { Id = 1L, Descricao = "Capacitação" },
                        new { Id = 2L, Descricao = "Formação" }
                    );
                });

            modelBuilder.Entity("Trilhas.Data.Model.OrgaoExpedidor", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Nome");

                    b.Property<string>("Sigla");

                    b.HasKey("Id");

                    b.ToTable("OrgaoExpedidor");
                });

            modelBuilder.Entity("Trilhas.Data.Model.Pessoa", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Bairro");

                    b.Property<string>("Cep");

                    b.Property<string>("Cidade");

                    b.Property<string>("Complemento");

                    b.Property<string>("Cpf");

                    b.Property<DateTime>("CreationTime");

                    b.Property<string>("CreatorUserId");

                    b.Property<DateTime>("DataNascimento");

                    b.Property<long?>("DeficienciaId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("DeletionUserId");

                    b.Property<string>("Email");

                    b.Property<long?>("EntidadeId");

                    b.Property<long?>("EscolaridadeId");

                    b.Property<bool>("FlagDeficiente");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<string>("LastModifierUserId");

                    b.Property<string>("Logradouro");

                    b.Property<string>("Nome");

                    b.Property<string>("NomeSocial");

                    b.Property<string>("Numero");

                    b.Property<string>("NumeroFuncional");

                    b.Property<string>("NumeroIdentidade");

                    b.Property<string>("NumeroTitulo");

                    b.Property<long?>("OrgaoExpedidorId");

                    b.Property<string>("Pis");

                    b.Property<string>("SecaoTitulo");

                    b.Property<long?>("SexoId");

                    b.Property<string>("Uf");

                    b.Property<string>("UfIdentidade");

                    b.Property<string>("ZonaTitulo");

                    b.HasKey("Id");

                    b.HasIndex("DeficienciaId");

                    b.HasIndex("EntidadeId");

                    b.HasIndex("EscolaridadeId");

                    b.HasIndex("OrgaoExpedidorId");

                    b.HasIndex("SexoId");

                    b.ToTable("Pessoa");
                });

            modelBuilder.Entity("Trilhas.Data.Model.PessoaContato", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<string>("CreatorUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("DeletionUserId");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<string>("LastModifierUserId");

                    b.Property<string>("Numero");

                    b.Property<long?>("PessoaId");

                    b.Property<long>("TipoPessoaContatoId");

                    b.HasKey("Id");

                    b.HasIndex("PessoaId");

                    b.HasIndex("TipoPessoaContatoId");

                    b.ToTable("PessoaContato");
                });

            modelBuilder.Entity("Trilhas.Data.Model.Recurso", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<string>("CreatorUserId");

                    b.Property<decimal>("Custo");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("DeletionUserId");

                    b.Property<string>("Descricao");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<string>("LastModifierUserId");

                    b.Property<string>("Nome");

                    b.HasKey("Id");

                    b.ToTable("Recursos");
                });

            modelBuilder.Entity("Trilhas.Data.Model.Sexo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Nome");

                    b.HasKey("Id");

                    b.ToTable("Sexo");
                });

            modelBuilder.Entity("Trilhas.Data.Model.SolucaoEducacional", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<string>("CreatorUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("DeletionUserId");

                    b.Property<long?>("EstacaoId");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<string>("LastModifierUserId");

                    b.Property<string>("TipoDeSolucao")
                        .IsRequired();

                    b.Property<string>("Titulo");

                    b.HasKey("Id");

                    b.HasIndex("EstacaoId");

                    b.ToTable("SolucoesEducacionais");

                    b.HasDiscriminator<string>("TipoDeSolucao").HasValue("SolucaoEducacional");
                });

            modelBuilder.Entity("Trilhas.Data.Model.TipoDeCurso", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Descricao");

                    b.HasKey("Id");

                    b.ToTable("TiposDeCurso");

                    b.HasData(
                        new { Id = 1L, Descricao = "Presencial" },
                        new { Id = 3L, Descricao = "EaD" },
                        new { Id = 5L, Descricao = "Fórum" },
                        new { Id = 7L, Descricao = "Mesa Redonda" },
                        new { Id = 9L, Descricao = "Palestra" },
                        new { Id = 11L, Descricao = "Seminário" },
                        new { Id = 13L, Descricao = "WorkShop" }
                    );
                });

            modelBuilder.Entity("Trilhas.Data.Model.TipoLocalContato", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Nome");

                    b.HasKey("Id");

                    b.ToTable("TipoLocalContato");
                });

            modelBuilder.Entity("Trilhas.Data.Model.TipoPessoaContato", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Nome");

                    b.HasKey("Id");

                    b.ToTable("TipoPessoaContato");
                });

            modelBuilder.Entity("Trilhas.Data.Model.TiposDeEntidade", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Descricao");

                    b.HasKey("Id");

                    b.ToTable("TiposDeEntidade");

                    b.HasData(
                        new { Id = 1L, Descricao = "Municipal" },
                        new { Id = 2L, Descricao = "Estadual" },
                        new { Id = 3L, Descricao = "Federal" },
                        new { Id = 4L, Descricao = "Organização Não Governamental" }
                    );
                });

            modelBuilder.Entity("Trilhas.Data.Model.TrilhaDoUsuario", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<string>("CreatorUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("DeletionUserId");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<string>("LastModifierUserId");

                    b.Property<string>("UsuarioId");

                    b.HasKey("Id");

                    b.ToTable("Trilhas");
                });

            modelBuilder.Entity("Trilhas.Data.Model.Curso", b =>
                {
                    b.HasBaseType("Trilhas.Data.Model.SolucaoEducacional");

                    b.Property<string>("ConteudoProgramatico");

                    b.Property<string>("Descricao");

                    b.Property<long?>("EntidadeId");

                    b.Property<int>("FrequenciaMinimaCertificado");

                    b.Property<int>("FrequenciaMinimaDeclaracao");

                    b.Property<long?>("NivelDoCursoId");

                    b.Property<bool>("PermiteCertificado");

                    b.Property<string>("PreRequisitos");

                    b.Property<string>("PublicoAlvo");

                    b.Property<string>("Sigla");

                    b.Property<long?>("TipoDoCursoId");

                    b.HasIndex("EntidadeId");

                    b.HasIndex("NivelDoCursoId");

                    b.HasIndex("TipoDoCursoId");

                    b.ToTable("Curso");

                    b.HasDiscriminator().HasValue("curso");
                });

            modelBuilder.Entity("Trilhas.Data.Model.Livro", b =>
                {
                    b.HasBaseType("Trilhas.Data.Model.SolucaoEducacional");

                    b.Property<string>("Autor");

                    b.Property<DateTime?>("DataPublicacao");

                    b.Property<string>("Edicao");

                    b.Property<string>("Editora");

                    b.Property<string>("OutrasInformacoes");

                    b.Property<string>("Url");

                    b.ToTable("Livro");

                    b.HasDiscriminator().HasValue("livro");
                });

            modelBuilder.Entity("Trilhas.Data.Model.Video", b =>
                {
                    b.HasBaseType("Trilhas.Data.Model.SolucaoEducacional");

                    b.Property<DateTime?>("DataProducao");

                    b.Property<string>("Duracao");

                    b.Property<string>("OutrasInformacoes")
                        .HasColumnName("Video_OutrasInformacoes");

                    b.Property<string>("Responsavel");

                    b.Property<string>("Url")
                        .HasColumnName("Video_Url");

                    b.ToTable("Video");

                    b.HasDiscriminator().HasValue("video");
                });

            modelBuilder.Entity("Trilhas.Data.Model.Entidade", b =>
                {
                    b.HasOne("Trilhas.Data.Model.Municipio", "Municipio")
                        .WithMany()
                        .HasForeignKey("MunicipioId");

                    b.HasOne("Trilhas.Data.Model.TiposDeEntidade", "Tipo")
                        .WithMany()
                        .HasForeignKey("TipoId");
                });

            modelBuilder.Entity("Trilhas.Data.Model.Estacao", b =>
                {
                    b.HasOne("Trilhas.Data.Model.Eixo", "Eixo")
                        .WithMany()
                        .HasForeignKey("EixoId");
                });

            modelBuilder.Entity("Trilhas.Data.Model.Habilidade", b =>
                {
                    b.HasOne("Trilhas.Data.Model.Curso")
                        .WithMany("Habilidades")
                        .HasForeignKey("CursoId");

                    b.HasOne("Trilhas.Data.Model.SolucaoEducacional", "SolucaoEducacional")
                        .WithMany()
                        .HasForeignKey("SolucaoEducacionalId");
                });

            modelBuilder.Entity("Trilhas.Data.Model.ItemDaTrilha", b =>
                {
                    b.HasOne("Trilhas.Data.Model.SolucaoEducacional", "SolucaoEducacional")
                        .WithMany()
                        .HasForeignKey("SolucaoId");

                    b.HasOne("Trilhas.Data.Model.TrilhaDoUsuario", "Trilha")
                        .WithMany("Itens")
                        .HasForeignKey("TrilhaId");
                });

            modelBuilder.Entity("Trilhas.Data.Model.LocalContato", b =>
                {
                    b.HasOne("Trilhas.Data.Model.Local", "Local")
                        .WithMany("Contatos")
                        .HasForeignKey("LocalId");

                    b.HasOne("Trilhas.Data.Model.TipoLocalContato", "TipoContato")
                        .WithMany()
                        .HasForeignKey("TipoContatoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Trilhas.Data.Model.LocalRecurso", b =>
                {
                    b.HasOne("Trilhas.Data.Model.Local", "Local")
                        .WithMany("Recursos")
                        .HasForeignKey("LocalId");

                    b.HasOne("Trilhas.Data.Model.Recurso", "Recurso")
                        .WithMany()
                        .HasForeignKey("RecursoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Trilhas.Data.Model.LocalSala", b =>
                {
                    b.HasOne("Trilhas.Data.Model.Local", "Local")
                        .WithMany("Salas")
                        .HasForeignKey("LocalId");
                });

            modelBuilder.Entity("Trilhas.Data.Model.Modulo", b =>
                {
                    b.HasOne("Trilhas.Data.Model.Curso")
                        .WithMany("Modulos")
                        .HasForeignKey("CursoId");

                    b.HasOne("Trilhas.Data.Model.SolucaoEducacional", "SolucaoEducacional")
                        .WithMany()
                        .HasForeignKey("SolucaoEducacionalId");
                });

            modelBuilder.Entity("Trilhas.Data.Model.Pessoa", b =>
                {
                    b.HasOne("Trilhas.Data.Model.Deficiencia", "Deficiencia")
                        .WithMany()
                        .HasForeignKey("DeficienciaId");

                    b.HasOne("Trilhas.Data.Model.Entidade", "Entidade")
                        .WithMany()
                        .HasForeignKey("EntidadeId");

                    b.HasOne("Trilhas.Data.Model.Escolaridade", "Escolaridade")
                        .WithMany()
                        .HasForeignKey("EscolaridadeId");

                    b.HasOne("Trilhas.Data.Model.OrgaoExpedidor", "OrgaoExpedidorIdentidade")
                        .WithMany()
                        .HasForeignKey("OrgaoExpedidorId");

                    b.HasOne("Trilhas.Data.Model.Sexo", "Sexo")
                        .WithMany()
                        .HasForeignKey("SexoId");
                });

            modelBuilder.Entity("Trilhas.Data.Model.PessoaContato", b =>
                {
                    b.HasOne("Trilhas.Data.Model.Pessoa", "Pessoa")
                        .WithMany("Contatos")
                        .HasForeignKey("PessoaId");

                    b.HasOne("Trilhas.Data.Model.TipoPessoaContato", "TipoContato")
                        .WithMany()
                        .HasForeignKey("TipoPessoaContatoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Trilhas.Data.Model.SolucaoEducacional", b =>
                {
                    b.HasOne("Trilhas.Data.Model.Estacao", "Estacao")
                        .WithMany()
                        .HasForeignKey("EstacaoId");
                });

            modelBuilder.Entity("Trilhas.Data.Model.Curso", b =>
                {
                    b.HasOne("Trilhas.Data.Model.Entidade", "UnidadeDemandante")
                        .WithMany()
                        .HasForeignKey("EntidadeId");

                    b.HasOne("Trilhas.Data.Model.NivelDeCurso", "NivelDoCurso")
                        .WithMany()
                        .HasForeignKey("NivelDoCursoId");

                    b.HasOne("Trilhas.Data.Model.TipoDeCurso", "TipoDoCurso")
                        .WithMany()
                        .HasForeignKey("TipoDoCursoId");
                });
#pragma warning restore 612, 618
        }
    }
}
