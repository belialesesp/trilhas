/*! ngCkeditor v0.2.1 by Vitalii Savchuk(esvit666@gmail.com) - https://github.com/esvit/ng-ckeditor - New BSD License */

"use strict"; !function (e, t) { if ("function" != typeof define || !define.amd) return t(e); define(["angular", "ckeditor"], function (e) { return t(e) }) }(angular || null, function (O) { var n, e = O.module("ngCkeditor", []), o = !1; return e.run(["$q", "$timeout", function (e, t) { if (n = e.defer(), O.isUndefined(CKEDITOR)) throw new Error("CKEDITOR not found"); function a() { "loaded" === CKEDITOR.status ? (o = !0, n.resolve()) : a() } CKEDITOR.disableAutoInline = !0, CKEDITOR.on("loaded", a), t(a, 100) }]), e.directive("ckeditor", ["$timeout", "$q", function (p, A) { return { restrict: "AC", require: ["ngModel", "^?form"], scope: !1, link: function (d, l, e, t) { var c = t[0], s = t[1] || null, u = "textarea" === l[0].tagName.toLowerCase(), f = [], C = !1; u || l.attr("contenteditable", !0); function a() { var e = { disableNativeSpellChecker: !1, uiColor: "#FAFAFA", height: "400px", width: "100%" }, t = "/fileman/index.html"; e = O.extend(e, { language: "pt-br", filebrowserBrowseUrl: t, filebrowserImageBrowseUrl: t + "?type=image", removeDialogTabs: "link:upload;image:upload" }); var a = u ? CKEDITOR.replace(l[0], e) : CKEDITOR.inline(l[0], e), n = A.defer(); function o(e) { var t = a.getData(); "" === t && (t = null), p(function () { !0 === e && t === c.$viewValue || c.$setViewValue(t), !0 === e && s && s.$setPristine() }, 0) } function i(e) { if (f.length) { var t = f.pop() || "<p></p>"; C = !1, a.setData(t, function () { o(e), C = !0 }) } } l.bind("$destroy", function () { a && CKEDITOR.instances[a.name] && CKEDITOR.instances[a.name].destroy() }), a.on("pasteState", o), a.on("change", o), a.on("blur", o), a.on("instanceReady", function () { d.$broadcast("ckeditor.ready"), d.$apply(function () { i(!0) }), a.document.on("keyup", o) }), a.on("customConfigLoaded", function () { n.resolve() }), c.$render = function () { f.push(c.$viewValue), C && i() }; var r = {}; for (var m in CKEDITOR.instances) r = CKEDITOR.instances[m]; r.addCommand("cmdNomeCurso", { exec: function (e) { if (e.element.$.form) try { e.updateElement(), e.insertHtml("<span>[#TITULO_CURSO]</span>") } catch (e) { alert(e) } } }), r.ui.addButton("nome-curso", { label: "T&Iacute;TULO DO CURSO", command: "cmdNomeCurso", toolbar: "eventos" }), r.addCommand("cmdNomeCursista", { exec: function (e) { if (e.element.$.form) try { e.updateElement(), e.insertHtml("<span>[#NOME_CURSISTA]</span>") } catch (e) { alert(e) } } }), r.ui.addButton("nome-cursista", { label: "NOME CURSISTA", command: "cmdNomeCursista", toolbar: "eventos" }), r.addCommand("cmdDataInicial", { exec: function (e) { if (e.element.$.form) try { e.updateElement(), e.insertHtml("<span>[#DATA_INICIAL]</span>") } catch (e) { alert(e) } } }), r.ui.addButton("data-inicial", { label: "DATA INICIAL", command: "cmdDataInicial", toolbar: "eventos" }), r.addCommand("cmdDataFinal", { exec: function (e) { if (e.element.$.form) try { e.updateElement(), e.insertHtml("<span>[#DATA_FINAL]</span>") } catch (e) { alert(e) } } }), r.ui.addButton("data-final", { label: "DATA FINAL", command: "cmdDataFinal", toolbar: "eventos" }), r.addCommand("cmdCargaHoraria", { exec: function (e) { if (e.element.$.form) try { e.updateElement(), e.insertHtml("<span>[#CARGA_HORARIA]</span>") } catch (e) { alert(e) } } }), r.ui.addButton("carga-horaria", { label: "CARGA HOR&Aacute;RIA", command: "cmdCargaHoraria", toolbar: "eventos" }), r.addCommand("cmdConteudoProgramatico", { exec: function (e) { if (e.element.$.form) try { e.updateElement(), e.insertHtml("<span>[#CONTEUDO_PROGRAMATICO]</span>") } catch (e) { alert(e) } } }), r.ui.addButton("conteudo-programatico", { label: "CONTE&Uacute;DO PROGRAM&Aacute;TICO", command: "cmdConteudoProgramatico", toolbar: "eventos" }), r.addCommand("cmdNomeDocente", { exec: function (e) { if (e.element.$.form) try { e.updateElement(), e.insertHtml("<span>[#NOME_DOCENTE]</span>") } catch (e) { alert(e) } } }), r.ui.addButton("nome-docente", { label: "NOME DOCENTE", command: "cmdNomeDocente", toolbar: "eventos" }), r.addCommand("cmdLocal", { exec: function (e) { if (e.element.$.form) try { e.updateElement(), e.insertHtml("<span>[#LOCAL]</span>") } catch (e) { alert(e) } } }), r.ui.addButton("local", { label: "LOCAL", command: "cmdLocal", toolbar: "eventos" }), r.addCommand("cmdDataAtual", { exec: function (e) { if (e.element.$.form) try { e.updateElement(), e.insertHtml("<span>[#DATA_ATUAL]</span>") } catch (e) { alert(e) } } }), r.ui.addButton("data-atual", { label: "DATA ATUAL", command: "cmdDataAtual", toolbar: "eventos" }), CKEDITOR.config.toolbar = [{ name: "basicstyles", items: ["Bold", "Italic", "Strike", "Underline"] }, { name: "paragraph", items: ["BulletedList", "NumberedList", "Blockquote"] }, { name: "editing", items: ["JustifyLeft", "JustifyCenter", "JustifyRight", "JustifyBlock"] }, { name: "links", items: ["Link", "Unlink", "Anchor"] }, { name: "tools", items: ["SpellChecker", "Maximize"] }, "/", { name: "styles", items: ["Format", "FontSize", "TextColor", "PasteText", "PasteFromWord", "RemoveFormat"] }, { name: "insert", items: ["Image", "Table", "SpecialChar"] }, { name: "forms", items: ["Outdent", "Indent"] }, { name: "clipboard", items: ["Undo", "Redo"] }, { name: "document", items: ["PageBreak", "Source"] }, "/", { name: "eventos", items: ["nome-curso", "nome-cursista", "data-inicial", "data-final", "carga-horaria", "conteudo-programatico", "nome-docente", "local", "data-atual"] }], CKEDITOR.config.allowedContent = !0 } "loaded" === CKEDITOR.status && (o = !0), o ? a() : n.promise.then(a) } } }]), e });
//# sourceMappingURL=ng-ckeditor.min.js.map